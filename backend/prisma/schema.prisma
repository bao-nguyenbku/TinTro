generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  owner           Owner?
  renter          Renter?
  role            Role             @default(USER)
  email           String           @unique
  phone           String           @unique
  password        String
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // FIXME: Change this later
  avatar          String           @default("https://www.pngkey.com/png/detail/115-1150152_default-profile-picture-avatar-png-green.png")
  messages        Message[]
  messageSections MessageSection[] @relation("users_in_message_section")
  review          Review[]

  @@index([id])
}

model Message {
  id               Int            @id @default(autoincrement())
  text             String
  createdAt        DateTime       @default(now())
  fromId           Int
  messageSectionId Int
  from             User           @relation(fields: [fromId], references: [id])
  messageSection   MessageSection @relation(fields: [messageSectionId], references: [id])

  @@index([id, fromId, createdAt])
}

model MessageSection {
  id       Int       @id @default(autoincrement())
  messages Message[]
  users    User[]    @relation("users_in_message_section")
}

model Owner {
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  accommodation Accommodation?
  rentRequest   RentRequest[]

  @@index(userId)
}

model Renter {
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  rentRequest RentRequest[]
  rentRoom    Room?         @relation(fields: [rentRoomId], references: [id])
  rentRoomId  Int?

  @@index(userId)
}

enum Role {
  ADMIN
  USER
}

model Accommodation {
  id              Int           @id @default(autoincrement())
  name            String
  addressNumber   String
  addressStreet   String
  addressDistrict String
  addressCity     String
  area            Float
  rooms           Room[]
  price           Int           @default(0)
  owner           Owner         @relation(fields: [ownerId], references: [userId])
  ownerId         Int           @unique
  description     String
  thumbnail       String        @default("")
  images          String[]      @default([])
  utilities       String[]
  rentRequest     RentRequest[]
  review          Review[]
}

model RentRequest {
  id              Int           @id @default(autoincrement())
  renter          Renter        @relation(fields: [renterId], references: [userId])
  renterId        Int
  owner           Owner         @relation(fields: [ownerId], references: [userId])
  ownerId         Int
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId Int           @unique
  status          RequestStatus
}

model Room {
  id              Int           @id @default(autoincrement())
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId Int
  renter          Renter[]
  status          RoomStatus
}

model Review {
  id              Int           @id @default(autoincrement())
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId Int
  rating          Int
}

enum RequestStatus {
  WAITING
  CONFIRM
}

enum RoomStatus {
  RENTING
  AVAILABLE
}
