// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  owner Owner?
  renter Renter?
  role Role @default(USER)
  email String @unique
  phone String @unique
  password String
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index(id)
}

model Owner {
  user User @relation(fields: [userId], references: [id])
  userId Int @unique
  role Role @default(USER)
  email String @unique
  phone String @unique
  password String
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index(userId)

  accommodation Accommodation?
  rentRequest RentRequest[]

}

model Renter {
  user User @relation(fields: [userId], references: [id])
  userId Int @unique
  role Role @default(USER)
  email String @unique
  phone String @unique
  password String
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index(userId)

  rentRequest RentRequest[]
  rentRoom Room? @relation(fields: [rentRoomId], references: [id])
  rentRoomId Int?
}
enum Role {
  ADMIN
  USER
}


model Accommodation {
  id Int @id @default(autoincrement())
  name String
  addressNumber String
  addressStreet String
  addressDistrict String
  addressCity String
  area Float 
  rooms Room[]
  price Int @default(0)
  owner Owner @relation(fields: [ownerId], references: [userId])
  ownerId Int @unique
  description String
  thumbnail String @default("")
  images String[] @default([])
  utilities String[]
  rentRequest RentRequest[]
}

model RentRequest {
  id Int @id @default(autoincrement())
  renter Renter @relation(fields: [renterId], references: [userId])
  renterId Int
  owner Owner @relation(fields: [ownerId], references: [userId])
  ownerId Int
  accommodation Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId Int
  status RequestStatus
}

model Room {
  id Int @id @default(autoincrement())
  accommodation Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId Int
  renter Renter[]
  status RoomStatus
}

enum RequestStatus {
  WAITING
  CONFIRM
}

enum RoomStatus {
  RENTING
  AVAILABLE
}