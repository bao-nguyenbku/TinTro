generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  email          String           @unique
  name           String
  password       String
  role           Role             @default(USER)
  updatedAt      DateTime         @updatedAt
  phone          String           @unique
  avatar         String           @default("https://www.pngkey.com/png/detail/115-1150152_default-profile-picture-avatar-png-green.png")
  Message        Message[]
  accommodation Accommodation?
  MessageSection MessageSection[] @relation("users_in_message_section")

  @@index([id])
}

model Message {
  id               Int            @id @default(autoincrement())
  text             String
  createdAt        DateTime       @default(now())
  fromId           Int
  messageSectionId Int
  User             User           @relation(fields: [fromId], references: [id])
  MessageSection   MessageSection @relation(fields: [messageSectionId], references: [id])

  @@index([id, fromId, createdAt])
}

model MessageSection {
  id      Int       @id @default(autoincrement())
  Message Message[]
  User    User[]    @relation("users_in_message_section")
}

enum Role {
  ADMIN
  USER
}

model Accommodation {
  id Int @id @default(autoincrement())
  name String
  addressNumber String
  addressStreet String
  addressDistrict String
  addressCity String
  area Float 
  rooms Room[]
  price Int @default(0)
  owner User @relation(fields: [ownerId], references: [id])
  ownerId Int @unique
  description String
  thumbnail String @default("")
  images String[] @default([""])
  utilities String[]
}

model Room {
  id Int @id @default(autoincrement())
  accommodation Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId Int
  status RoomStatus
}

enum RoomStatus {
  RENTING
  AVAILABLE
}