generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  owner     Owner?
  renter    Renter?
  role      Role     @default(USER)
  email     String   @unique
  phone     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  avatar          String           @default("https://obedient-veil-production.up.railway.app/public/default-avatar.png")
  messages        Message[]
  messageSections MessageSection[] @relation("users_in_message_section")
  review          Review[]

  @@index([id])
}

model Message {
  id               Int            @id @default(autoincrement())
  text             String
  createdAt        DateTime       @default(now())
  fromId           Int
  messageSectionId Int
  from             User           @relation(fields: [fromId], references: [id])
  messageSection   MessageSection @relation(fields: [messageSectionId], references: [id])

  @@index([id, fromId, createdAt])
}

model MessageSection {
  id       Int       @id @default(autoincrement())
  messages Message[]
  users    User[]    @relation("users_in_message_section")
}

model Owner {
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  accommodation Accommodation?
  rentRequest   RentRequest[]
  Renting       Renting[]

  @@index(userId)
}

model Renter {
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  rentRequest RentRequest[]
  rentRoom    Room?         @relation(fields: [rentRoomId], references: [id])
  rentRoomId  Int?
  Renting     Renting[]
  parking     Parking?
  @@index(userId)
}

enum Role {
  ADMIN
  USER
}

model Accommodation {
  id              Int           @id @default(autoincrement())
  name            String
  addressNumber   String
  addressStreet   String
  addressDistrict String
  addressCity     String
  area            Float
  rooms           Room[]
  price           Int           @default(0)
  owner           Owner         @relation(fields: [ownerId], references: [userId])
  ownerId         Int           @unique
  description     String
  thumbnail       String        @default("")
  images          String[]      @default([])
  utilities       String[]
  rentRequest     RentRequest[]
  review          Review[]
  Renting         Renting[]
}

model RentRequest {
  id              Int           @id @default(autoincrement())
  renter          Renter        @relation(fields: [renterId], references: [userId])
  renterId        Int           @unique
  owner           Owner         @relation(fields: [ownerId], references: [userId])
  ownerId         Int
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId Int           
  status          RequestStatus
}

model Renting {
  id              Int           @id @default(autoincrement())
  renter          Renter        @relation(fields: [renterId], references: [userId])
  renterId        Int           @unique
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId Int
  owner           Owner         @relation(fields: [ownerId], references: [userId])
  ownerId         Int
  room            Room          @relation(fields: [roomId], references: [id])
  roomId          Int
  status          RentingStatus @default(RENTING)
  requestRole     Role          @default(USER)
}

model Room {
  id              Int           @id @default(autoincrement())
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId Int
  roomName        String        @default("")
  renter          Renter[]
  status          RoomStatus    @default(AVAILABLE)
  Renting         Renting[]

  wifi            Wifi?
  parking         Parking[]
  personNumber    Int          @default(1)
}

model Wifi {
  id              Int           @id @default(autoincrement())
  room            Room          @relation(fields: [roomId], references: [id])
  roomId          Int           @unique
  name            String
  password        String
  speed           String
  purchaseStatus  ServiceStatus
  price           Int
  startDate       DateTime      @default(now())
}
enum ServiceStatus {
  PURCHASED
  NONE
}
model Parking {
  id              Int           @id @default(autoincrement())
  renter          Renter        @relation(fields: [renterId], references: [userId])
  renterId        Int           @unique
  room            Room          @relation(fields: [roomId], references: [id])
  roomId          Int
  licensePlate    String
  name            String
  color           String
  price           Int           @default(0)
  purchaseStatus  ServiceStatus @default(PURCHASED)
  startDate       DateTime      @default(now())
}
model Review {
  id              Int           @id @default(autoincrement())
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId Int
  rating          Int
}

enum RequestStatus {
  WAITING
  CONFIRM
}

enum RentingStatus {
  CHECKOUT
  RENTING
}

enum RoomStatus {
  RENTING
  AVAILABLE
}
